- name: Check if {{ nebula_install_dir }}/config.yaml
  ansible.builtin.stat:
    path: "{{ nebula_install_dir }}/config.yaml"
  register: host_config_stat

- name: Backing up {{ nebula_install_dir }}/config.yaml
  ansible.builtin.copy:
    src: "{{ nebula_install_dir }}/config.yaml"
    dest: "{{ nebula_install_dir }}/config-backup.yaml"
    remote_src: true
  when: host_config_stat.stat.exists

# 1 - Perform variable substitution from appropriate template

- name: Deploy nebula service configuration file
  ansible.builtin.template:
    src: nebula-service-config.j2
    dest: "{{ fqdn }}-config.yaml"
  when: not nebula_is_lighthouse
  delegate_to: localhost
  become: false

- name: Deploy nebula lighthouse configuration
  ansible.builtin.template:
    src: nebula-lighthouse-config.j2
    dest: "{{ fqdn }}-config.yaml"
  when: nebula_is_lighthouse
  delegate_to: localhost
  become: false

# Step 2 - Add host specific firewall settings (not expanded) to config

- name: Add inbound rules to the YAML configuration
  nebula_inbound_policy:
    path: "{{ fqdn }}-config.yaml"
    rules: "{{ nebula_inbound_rules }}"
  delegate_to: localhost
  become: false

# Step 3 - Expand firewall rules as necessary

- name: Perform firewall expansion for {{ fqdn }}
  ansible.builtin.command:
    cmd: nutils firewall expand --profiles /home/{{ user }}/Documents/device-profiles/profiles.yml "{{ fqdn }}-config.yaml" "{{ fqdn }}-config-expanded.yaml"
  delegate_to: localhost
  become: false

# Step 4 - Install the generated configuration into the system

- name: Installing generated configuration for {{ fqdn }}
  ansible.builtin.copy:
    src: "{{ fqdn }}-config-expanded.yaml"
    dest: "{{ nebula_install_dir }}/config.yaml"

- name: Delete {{ fqdn }}-config.yaml
  file:
    path: "{{ fqdn }}-config.yaml"
    state: absent
  delegate_to: localhost
  become: false

- name: Delete {{ fqdn }}-config.yaml
  file:
    path: "{{ fqdn }}-config-expanded.yaml"
    state: absent
  delegate_to: localhost
  become: false

