- name: Ensure jellyfin linux accounts exist
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    shell: "{{ item.shell | default(omit) }}"
    password: "{{ item.password }}"
    create_home: false
    state: present
  loop: "{{ jellyfin_linux_accounts }}"

- name: Ensure Jellyfin data directories exist
  file:
    path: "{{ item.location }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  loop: "{{ jellyfin_data_mounts }}"

- name: Ensure media .ssh directory exists
  file:
    path: "/home/media/.ssh"
    state: directory
    owner: "media"
    group: "media"
    mode: '0700'

- name: Set authorized keys for media
  authorized_key:
    user: "media"
    state: present
    key: "{{ item }}"
  with_items: "{{ ssh_authorized_keys }}"

- name: Deploy Jellyfin .env file into environment
  ansible.builtin.template:
    src: "docker-env-template.j2"
    dest: "{{ docker_services_dir }}/media/.env"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0400'

- name: Enable Jellyfin Backups
  include_role:
    name: configure_borg_backup
    public: true
  vars:
    # Borg - Encryption
    borg_src_dir: "{{ data_dir }}/jellyfin"
    borg_repo_dir: "{{ backup_dir }}/borg-jellyfin"
    borg_bws_secret_uid: "{{ lookup('bitwarden_field', 'bws_secret_uid', 'borg - jellyfin') }}"
    borg_script_loc: "{{ scripts_dir }}/backup-borg-jellyfin.sh"

    # IDrive E2 - Offsite Storage
    idrive_e2_target: "idrive-e2-jellyfin"
    idrive_e2_bucket: "jellyfin-backup"
    idrive_e2_access_key_id: "{{ lookup('bitwarden_field', 'rclone_access_key_id', 'borg - jellyfin') }}"
    idrive_e2_secret_access_key: "{{ lookup('bitwarden_field', 'rclone_secret_access_key', 'borg - jellyfin') }}"

- name: Adding Jellyfin backup task to crontab
  cron:
    name: "Jellyfin Backup"
    minute: "30"
    hour: "3"
    job: "{{ scripts_dir }}/backup-borg-jellyfin.sh"
    user: "root"
